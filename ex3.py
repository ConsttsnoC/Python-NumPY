#функции автозаполнения, создания матриц и числовых диапозонов
import numpy as np
#создаем список состоящий из 10 (0)
#np.array([0]*10)
#создаем список состоящий от 1 до 10
#np.array([x for x in range(1,11)])
# все перечисленные ниже функции работают быстрее чем array
#одномерный массив из произвольных чисел
#print(np.empty(3,2),dtype='int16')#можно указать тип данных

# или двумерный массив
#print(np.empty(10,dtype='int16'))

#матрица где по главной диагонали стоят 1
#print(np.eye(4))

#единичная матрица
#print(np.identity(5))

#массив из одних нулей
#print(np.zeros((2,3,4)))

#массив из всез единиц
#print(np.ones([4,3],dtype='int8'))

#произвольные массивы из заданных значений
#print(np.full((3,2),-1))

#функции создания матриц
#матрица из строки
#print(np.mat('1 2 3 4')) #матрица 1 на 4
#двумерная матрица из строки
#print(np.mat('1 2; 3 4')) #добавли ;
#или с помощью списков
#print(np.mat([(1,2,3), (4,5,6)]))

#матрица с элементами которые будут идти по главной диагонали
#print(np.diag([1,2,3]))

#матрица с выделением чисел по главной диагонали
#print(np.diag([(1,7,7),(7,2,7),(7,7,3)])) # [1 2 3]


#диагональная матрица из многомерных данных
#print(np.diagflat([(1,2,3),(4,5,6),(7,8,9)]))
#[[1 0 0 0 0 0 0 0 0]
# [0 2 0 0 0 0 0 0 0]
# [0 0 3 0 0 0 0 0 0]
 #[0 0 0 4 0 0 0 0 0]
# [0 0 0 0 5 0 0 0 0]
 #[0 0 0 0 0 6 0 0 0]
# [0 0 0 0 0 0 7 0 0]
# [0 0 0 0 0 0 0 8 0]
# [0 0 0 0 0 0 0 0 9]]

#треугольная матрица
#print(np.tri(4))
#[[1. 0. 0. 0.]
 #[1. 1. 0. 0.]
# [1. 1. 1. 0.]
# [1. 1. 1. 1.]]

#функция tril выполняет предобоазование уже существующей маторицы в трекольную(нули над главной диагональю)
#np.tril(a)

#функция triu выполняет предобоазование уже существующей маторицы в трекольную(нули под главной диагональю)
#np.triu(a)

#print(np.vander([1,2,3,4,5]))
#[[  1   1   1   1   1]
 #[ 16   8   4   2   1]
 #[ 81  27   9   3   1]
 #[256  64  16   4   1]
 #[625 125  25   5   1]]

#print(np.arange(5)) #в отличии от range можно рабать с 0.5 с вещественными данными
#[0 1 2 3 4]

#функция linspace
#print(np.linspace(0,2,10)) #от 0 до 2 с делением числа(шагом) на 10

#фукция logspace логорифмический маштаб
#print(np.logspace(0,1,3)) #1 * 10 а 3 сколько значений в интеравле берем

#функция geomspace Геометрическая прогрессия
#print(np.geomspace(1,4,3)) #от 1 до 4 (3 количево значений)

# def getRange(x,y):
#     return x + y
# a = np.fromfunction(getRange,(2,2))
# print(a)

#fromiter позволяет формирофать массив на основе любого итерир. объекта
#print(np.fromiter("hello", dtype='U1'))

#формрование массива из строк
#print(np.fromstring('1 2 3',dtype='int16',sep=" "))